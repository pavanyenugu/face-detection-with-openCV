# -*- coding: utf-8 -*-
"""face_detection_Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10nFH9ebrnxlKRDHPzFBGQQMsPVKcPcn2
"""

import cv2
import numpy as np
import streamlit as st
from PIL import Image

# Load the pre-trained Haar Cascade model for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Streamlit app title
st.title('Face Detection with OpenCV')

# Upload image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    # Read the image file and display it
    image = Image.open(uploaded_file)
    image = np.array(image)

    # Convert the image to grayscale (required by the face detection algorithm)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect faces in the image
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    # Draw rectangles around detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Convert the image back to RGB for Streamlit (OpenCV uses BGR by default)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Display the output image
    st.image(image, caption="Processed Image", use_column_width=True)